Haskell is a functional programming language. If you have some programming experience, see the overview to see a bit of how Haskell works and is different from other languages.

Haskell is distinct in a few ways:

    Haskell is a pure functional programming language. If you call the same function twice in two different places with the same arguments, it will return exactly the same value both times.
    Haskell provides a modern type system with sophisticated features like typeclasses and generalized algebraic data types (soon enough, terms like those will roll smoothly off your tongue).
    Haskell is also a lazy language that does calculations only when they are needed to get a final result.

Haskell programmers enjoy their language because dealing with only pure functions makes code much easier to understand and each function's correctness much easier to analyze and even to prove. Moreover, the advanced type system helps catch mistakes, both silly and profound.

In this book we aim to introduce you both to the Haskell language, from the very basics to advanced features, and to computer programming in general. We urge seasoned programmers to be especially patient with this process. In all likelihood, the languages you are most familiar with differ greatly from Haskell, and habits from those languages might make it more difficult to understand how things work âˆ’ they are simple, but different. Face learning to see the world through the warped mindset of a functional programmer as an adventure in a brave new world, which will bring you understanding valuable far beyond the boundaries of any language.
